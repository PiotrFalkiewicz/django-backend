from django.shortcuts import render
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.http import HttpResponse
from django.http import JsonResponse
from rest_framework.renderers import JSONRenderer
from rest_framework import serializers
import json
import sqlite3


def addCameraToDB(serial, owner, name):
    conn = sqlite3.connect('db.sqlite3')

    print("Add Camera to DB: {} {} {}".format(serial, owner, name))
    return

def getCamerasByOwner(owner):
    print("Get Cameras by Owner: {}".format(owner))
    return

# Create your views here.

#PATH: /v1/camera_address
@api_view(['GET'])
def get_test_address(request,format=None):
    if request.method == 'GET':
        data = {"id":"http://52.236.165.15:80/hls/test.m3u8"}
        dump = json.dumps(data)
        return HttpResponse(dump, content_type="application/json")

#PATH: /v1/add_rasp
@api_view(['POST'])
def register_rasp(request,format=json):
    if request.method == 'POST':
        #read serial from json
        # serial = request.GET['serial_id']
        b_json = request.body.decode('UTF-8')
        data_json = json.loads(b_json)
        serial = data_json['serial_id']
        print("SERIAL: {}".format(serial))
        
#add to serial to db with default name "camera"
        # addCameraToDB(serial, None, "Camera")
        #send back 200
        return HttpResponse(status.HTTP_200_OK)

#PATH: /v1/get_cameras/<id>
@api_view(['GET'])
def get_raspis(request,format=json):
    if request.method == 'GET':
        #read owner from request
        user = request.GET['user']

        #receive list of his raspies
        listOfCameras = getCamerasByOwner(user)

        #get user id from request
        #get raspis by uid from db
        #send back list of cameras
        data = {}
        data['id'] = 'http://52.236.165.15:80/hls/test.m3u8'
        json_data = json.dumps(data)
        return Response(data=json_data)

#PATH: /v1/connect_rasp
@api_view(['POST'])
def connect_rasp_with_user(request,format=json):
    if request.method == 'POST':
        #receive from json user and raspi serial
        #add another owner to rasp in db
        #send back 200
        return

#PATH: /v1/post_sensors
@api_view(['POST'])
def sensors_update(request,format=json):
    if request.method == 'POST':
        #receive from json sensor name, new value and raspi serial
        #get devices connected with raspi
        #send to firebase POST request with data: devicesIDs and sensor data
        #send back 200
        return



